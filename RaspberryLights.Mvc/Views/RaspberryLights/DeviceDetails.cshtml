@model DeviceDetailsViewModel
@using RaspberryLights.Domain.Enums;

<div class="container bg-black text-white">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card mb-4 bg-dark">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <h1 class="card-title">@Model.Device.Name</h1>


                        <a href="@Url.Action("EditDeviceDetails", new { DeviceId = Model.Device.Id })" class="btn btn-secondary">Edit</a>
                    </div>

                    @if (Model.Device.Type == DeviceType.Car)
                    {
                        <div class="registration-frame">
                            <span>@Model.Device.RegistrationNumber</span>
                        </div>
                    }

                    <hr/>

                    <h2>Animation</h2>

                    <form asp-action="StartAnimation" method="post" class="mb-2">
                        <input type="hidden" name="deviceId" value="@Model.Device.Id">

                        <input type="hidden" name="animationParameters.CustomColor.R" id="customColorR" value="@Model.AnimationParameters.CustomColor.R">
                        <input type="hidden" name="animationParameters.CustomColor.G" id="customColorG" value="@Model.AnimationParameters.CustomColor.G">
                        <input type="hidden" name="animationParameters.CustomColor.B" id="customColorB" value="@Model.AnimationParameters.CustomColor.B">


                        <div class="row">
                            <div class="col-md-6">
                                <div class="btn-group-vertical">
                                    @foreach (var animation in Model.AvailableAnimations)
                                    {
                                        <button type="submit" name="animationParameters.Animation" value="@animation" class="btn btn-primary @(Model.AnimationParameters.Animation == animation ? "active" : "")">@animation</button>
                                    }
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="speedType">Speed Type</label>
                                    <br/>
                                    <div id="speedType" class="btn-group" role="group" aria-label="Speed Type Buttons">
                                        @foreach (var speedType in Model.AvailableSpeedTypes)
                                        {
                                            <button type="button" class="btn @(Model.AnimationParameters.SpeedType == speedType ? "btn-primary active" : "btn-secondary")" data-value="@speedType">@speedType</button>
                                        }
                                    </div>
                                    <input type="hidden" id="selectedSpeedType" name="animationParameters.SpeedType" value="@Model.AnimationParameters.SpeedType">
                                </div>
                                <br>

                                <div class="row">
                                    <div class="col-md-12">
                                        <label for="customColor">Custom Color</label>
                                        <br>
                                        <input type="color" id="customColor" name="animationParameters.CustomColor" value="@Model.AnimationParameters.CustomColor.ToHexString()">
                                    </div>
                                </div>
                                <br>

                                <div class="row">
                                    <div class="col-md-12">
                                        @{ var userDefinedSpeedValue = Model.AnimationParameters.UserDefinedSpeed; }
                                        <label for="userDefinedSpeed">Speed</label>
                                        <input type="range" id="userDefinedSpeed" name="animationParameters.UserDefinedSpeed" min="0" max="255" value="@userDefinedSpeedValue">
                                        <output for="userDefinedSpeed" id="userDefinedSpeedVal">@userDefinedSpeedValue</output>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-12">
                                        @{ var brightnessValue = Model.AnimationParameters.Brightness; }
                                        <label for="brightness">Brightness</label>
                                        <input type="range" id="brightness" name="animationParameters.Brightness" min="0" max="255" value="@brightnessValue">
                                        <output for="brightness" id="brightnessVal">@brightnessValue</output>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </form>

                </div>
            </div>
            <a href="@Url.Action("Index")" class="btn btn-secondary">Back</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const buttons = document.querySelectorAll('#speedType button');
        const hiddenInput = document.getElementById('selectedSpeedType');
    
        buttons.forEach(button => {
            button.addEventListener('click', function () {
                buttons.forEach(b => b.classList.replace('btn-primary', 'btn-secondary'));
                button.classList.replace('btn-secondary', 'btn-primary');
                hiddenInput.value = button.getAttribute('data-value');
            });
        });
    });

    const userDefinedSpeed = document.getElementById('userDefinedSpeed');
    const userDefinedSpeedVal = document.getElementById('userDefinedSpeedVal');
    
    userDefinedSpeed.addEventListener('input', () => {
        userDefinedSpeedVal.innerText = userDefinedSpeed.value;
    });
    
    const brightness = document.getElementById('brightness')
    const brightnessVal = document.getElementById('brightnessVal')
    
    brightness.addEventListener('input', () => {
        brightnessVal.innerText = brightness.value
    })
    
    const colorPicker = document.querySelector('#customColor')
    const rInput = document.querySelector('#customColorR')
    const gInput = document.querySelector('#customColorG')
    const bInput = document.querySelector('#customColorB')
    
    colorPicker.addEventListener('change', (e) => {
      const color = e.target.value;
      const r = parseInt(color.substring(1, 3), 16);
      const g = parseInt(color.substring(3, 5), 16);
      const b = parseInt(color.substring(5, 7), 16);
    
      rInput.value = r;
      gInput.value = g;
      bInput.value = b;
    })
</script>